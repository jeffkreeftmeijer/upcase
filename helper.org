* Helper
# Local Variables:
# eval: (org-babel-lob-ingest (concat (file-name-directory buffer-file-name) "compile.org"))
# End:

  #+begin_src rust :exports none :tangle src/lib.rs :eval no :noweb yes
      <<empty-implementation>>

  #+end_src

  #+name: test-2
  #+begin_src rust :tangle src/lib.rs :eval no
    #[cfg(test)]
    mod tests {
	use super::*;

	macro_rules! assert_utf8_bytes_eq {
	    ($left:expr, $right:expr) => {
		if ($left != $right) {
		    panic!(
			"assertion failed: `(left == right)`\n  left: `{:?}`\n right: `{:?}`",
			String::from_utf8_lossy($left),
			String::from_utf8_lossy($right),
		    )
		}
	    };
	}

	#[test]
	fn writes_upcased_input_to_output() {
	    let mut output: Vec<u8> = Vec::new();

	    upcase(&mut "uppercase!\n".as_bytes(), &mut output).unwrap();
	    assert_utf8_bytes_eq!(&output, b"UPPERCASE!\n");
	}
    }
  #+end_src

  #+begin_src shell :exports both :results output :prologue "exec 2>&1", :epilogue "true"
    cargo test
  #+end_src

  #+RESULTS:
  #+begin_example
     Compiling upcase v0.1.0 (/Users/jeffkreeftmeijer/upcase)
      Finished test [unoptimized + debuginfo] target(s) in 0.67s
       Running target/debug/deps/upcase-37c459487bdbe122

  running 1 test
  test tests::writes_upcased_input_to_output ... FAILED

  failures:

  ---- tests::writes_upcased_input_to_output stdout ----
  thread 'tests::writes_upcased_input_to_output' panicked at 'assertion failed: `(left == right)`
    left: `""`
   right: `"UPPERCASE!\n"`', src/lib.rs:31:5
  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


  failures:
      tests::writes_upcased_input_to_output

  test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out

  error: test failed, to rerun pass '--lib'
  #+end_example
